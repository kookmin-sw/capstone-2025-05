name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ maple-frontend/main, maple-frontend/develop ]
  pull_request:
    branches: [ maple-frontend/main, maple-frontend/develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    - name: Run linting
      run: yarn lint || echo "No linting configuration found"
    - name: Run tests
      run: yarn test || echo "No tests found"
      env:
        REACT_APP_SPOTIFY_CLIENT_ID: ${{ secrets.REACT_APP_SPOTIFY_CLIENT_ID }}
        REACT_APP_SPOTIFY_REDIRECT_URI: ${{ secrets.REACT_APP_SPOTIFY_REDIRECT_URI }}

  build:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/maple-frontend/main' || github.ref == 'refs/heads/maple-frontend/develop') }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    - name: Build
      run: yarn build
      env:
        REACT_APP_SPOTIFY_CLIENT_ID: ${{ secrets.REACT_APP_SPOTIFY_CLIENT_ID }}
        REACT_APP_SPOTIFY_REDIRECT_URI: ${{ secrets.REACT_APP_SPOTIFY_REDIRECT_URI }}
        CI: "false"  # ESLint 경고를 무시하도록 CI 환경 변수 설정
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: build/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/maple-frontend/main' || github.ref == 'refs/heads/maple-frontend/develop') }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build
        path: build
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/maple-frontend:latest
        platforms: linux/arm64  # ARM64 플랫폼으로 설정
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.OCI_HOST }}
        username: ${{ secrets.OCI_USERNAME }}
        key: ${{ secrets.OCI_SSH_KEY }}
        passphrase: ${{ secrets.OCI_SSH_KEY_PASSPHRASE }}
        port: ${{ secrets.OCI_PORT }}
        script: |
          echo "Starting frontend deployment..."
          cd ~/maple-app
          
          # 프론트엔드 환경 변수 추가
          echo "Updating .env file with frontend variables..."
          grep -q "REACT_APP_SPOTIFY_CLIENT_ID" .env || echo "REACT_APP_SPOTIFY_CLIENT_ID=${{ secrets.REACT_APP_SPOTIFY_CLIENT_ID }}" >> .env
          grep -q "REACT_APP_SPOTIFY_REDIRECT_URI" .env || echo "REACT_APP_SPOTIFY_REDIRECT_URI=${{ secrets.REACT_APP_SPOTIFY_REDIRECT_URI }}" >> .env
          
          # 중요: Nginx 설정 파일은 덮어쓰지 않고 필요한 부분만 수정
          echo "Updating Nginx configuration without overwriting API settings..."
          
          # 기존 설정 파일을 백업 (날짜 포함)
          cp default.conf default.conf.bak.$(date +%Y%m%d%H%M%S)
          
          # 현재 설정 파일에서 프론트엔드 경로만 업데이트 (오픈API 설정은 건드리지 않음)
          # /openapi.json 접근 차단 설정을 제거하고 프론트엔드 경로 추가
          if grep -q "location = /openapi.json" default.conf; then
            # openapi.json 차단 설정이 있으면 제거
            sed -i '/location = \/openapi.json/,/}/d' default.conf
          fi
          
          # 프론트엔드 경로 설정 추가/업데이트
          if grep -q "location / {" default.conf; then
            # 기존 location / 블록이 있으면 업데이트
            sed -i '/location \/ {/,/}/c\
          # 프론트엔드 React 애플리케이션을 위한 처리\
          location / {\
              proxy_pass http://frontend:80;\
              proxy_set_header Host $host;\
              proxy_set_header X-Real-IP $remote_addr;\
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\
              proxy_set_header X-Forwarded-Proto $scheme;\
              \
              # WebSocket 지원 (필요한 경우)\
              proxy_http_version 1.1;\
              proxy_set_header Upgrade $http_upgrade;\
              proxy_set_header Connection "upgrade";\
          }' default.conf
          else
            # 없으면 파일 끝에 추가
            cat >> default.conf << 'EOF'
          
          # 프론트엔드 React 애플리케이션을 위한 처리
          location / {
              proxy_pass http://frontend:80;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              
              # WebSocket 지원 (필요한 경우)
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
          }
          
          # React Router를 위한 처리 (클라이언트 사이드 라우팅)
          location ~* \.(?:manifest|appcache|html?|xml|json)$ {
              proxy_pass http://frontend:80;
              expires -1;
          }
          EOF
          fi
          
          # Docker Compose 파일 업데이트 
          echo "Updating docker-compose.yml..."
          
          # 백업 생성
          cp docker-compose.yml docker-compose.yml.bak.$(date +%Y%m%d%H%M%S)
          
          # frontend 서비스가 이미 있는지 확인
          if grep -q "frontend:" docker-compose.yml; then
            echo "Frontend service already exists in docker-compose.yml"
          else
            # frontend 서비스 추가
            sed -i '/services:/a \
          # 프론트엔드 서비스 (새로 추가)\
          frontend:\
            image: ${{ secrets.DOCKER_USERNAME }}/maple-frontend:latest\
            container_name: maple-frontend\
            restart: always\
            environment:\
              - REACT_APP_SPOTIFY_CLIENT_ID=\${REACT_APP_SPOTIFY_CLIENT_ID}\
              - REACT_APP_SPOTIFY_REDIRECT_URI=\${REACT_APP_SPOTIFY_REDIRECT_URI}\
            networks:\
              - maple-network' docker-compose.yml
            
            # nginx depends_on에 frontend 추가
            sed -i '/depends_on:/,/- app/s/- app/- app\n      - frontend/' docker-compose.yml
          fi
          
          echo "Pulling the latest frontend Docker image..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/maple-frontend:latest || echo "Failed to pull frontend image!"
          
          echo "Restarting containers with updated configuration..."
          docker-compose up -d --force-recreate || echo "Failed to start containers!"
          
          echo "Deployment finished. Checking running containers..."
          docker ps