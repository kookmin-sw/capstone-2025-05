name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ maple-frontend/main, maple-frontend/develop ]
  pull_request:
    branches: [ maple-frontend/main, maple-frontend/develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'yarn'
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    - name: Run linting
      run: yarn lint || echo "No linting configuration found"
    - name: Run tests
      run: yarn test || echo "No tests found"
      env:
        REACT_APP_SPOTIFY_CLIENT_ID: ${{ secrets.REACT_APP_SPOTIFY_CLIENT_ID }}
        REACT_APP_SPOTIFY_REDIRECT_URI: ${{ secrets.REACT_APP_SPOTIFY_REDIRECT_URI }}

  build:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/maple-frontend/main' || github.ref == 'refs/heads/maple-frontend/develop') }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'yarn'
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    - name: Build
      run: yarn build
      env:
        REACT_APP_SPOTIFY_CLIENT_ID: ${{ secrets.REACT_APP_SPOTIFY_CLIENT_ID }}
        REACT_APP_SPOTIFY_REDIRECT_URI: ${{ secrets.REACT_APP_SPOTIFY_REDIRECT_URI }}
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: build/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/maple-frontend/main' || github.ref == 'refs/heads/maple-frontend/develop') }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build
        path: build
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/maple-frontend:latest
        platforms: linux/arm64  # 백엔드와 같은 ARM64 플랫폼으로 설정
        cache-from: type=gha
        cache-to: type=gha,mode=min
    
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.OCI_HOST }}
        username: ${{ secrets.OCI_USERNAME }}
        key: ${{ secrets.OCI_SSH_KEY }}
        passphrase: ${{ secrets.OCI_SSH_KEY_PASSPHRASE }}
        port: ${{ secrets.OCI_PORT }}
        script: |
          echo "Starting frontend deployment..."
          cd ~/maple-app  # 백엔드와 같은 디렉토리 사용
          
          # 프론트엔드 환경 변수 추가
          echo "Updating .env file with frontend variables..."
          # .env 파일에 프론트엔드 환경 변수 추가/업데이트
          grep -q "REACT_APP_SPOTIFY_CLIENT_ID" .env || echo "REACT_APP_SPOTIFY_CLIENT_ID=${{ secrets.REACT_APP_SPOTIFY_CLIENT_ID }}" >> .env
          grep -q "REACT_APP_SPOTIFY_REDIRECT_URI" .env || echo "REACT_APP_SPOTIFY_REDIRECT_URI=${{ secrets.REACT_APP_SPOTIFY_REDIRECT_URI }}" >> .env
          
          # Nginx 설정 백업 및 업데이트
          echo "Updating Nginx configuration..."
          cp default.conf default.conf.bak.$(date +%Y%m%d%H%M%S)
          
          # Nginx 설정에 프론트엔드 경로 추가
          cat > default.conf << 'EOF'
          server {
              listen 80;
              server_name maple.ne.kr;
              
              location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
              }
              
              # Redirect HTTP to HTTPS
              location / {
                  return 301 https://$host$request_uri;
              }
          }
          
          server {
              listen 443 ssl;
              server_name maple.ne.kr;
          
              # SSL 설정
              ssl_certificate /etc/letsencrypt/live/maple.ne.kr/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/maple.ne.kr/privkey.pem;
              
              # Enhanced SSL settings
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_prefer_server_ciphers on;
              ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
              ssl_session_timeout 1d;
              ssl_session_cache shared:SSL:50m;
              ssl_stapling on;
              ssl_stapling_verify on;
          
              # Block direct access to documentation endpoints
              location = /docs {
                  return 404;
              }               
          
              location = /redoc {
                  return 404;
              }
          
              location = /openapi.json {
                  return 404;
              }
          
              # API 요청을 FastAPI 서버로 프록시 - /api/v1/ 경로로 요청 받아서 FastAPI로 전달
              location /api/v1/ {
                  # /api/v1/ 경로를 제거하고 FastAPI 서버로 전달
                  proxy_pass http://app:8000/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_read_timeout 90s;
                  proxy_redirect off;
              }
          
              # 정적 파일 처리
              location /static/ {
                  alias /usr/share/nginx/html/static/;
                  expires 30d;
                  add_header Cache-Control "public, max-age=2592000";
                  access_log off;
              }
              
              # 프론트엔드 React 애플리케이션을 위한 처리
              location / {
                  proxy_pass http://frontend:80;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  
                  # WebSocket 지원 (필요한 경우)
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
              }
          
              # React Router를 위한 처리 (클라이언트 사이드 라우팅)
              location ~* \.(?:manifest|appcache|html?|xml|json)$ {
                  proxy_pass http://frontend:80;
                  expires -1;
              }
          
              # Nginx status
              location /nginx_status {
                  stub_status on;
                  access_log off;
                  allow 172.16.0.0/12;  # Docker network
                  deny all;
              }
          }
          EOF
          
          # Docker Compose 파일 백업 및 업데이트
          echo "Updating docker-compose.yml..."
          cp docker-compose.yml docker-compose.yml.bak.$(date +%Y%m%d%H%M%S)
          
          # Docker Compose 파일 새로 생성 (기존 서비스 유지하면서 프론트엔드 추가)
          cat > docker-compose.yml << EOL
          version: '3'
          
          services:
            # 백엔드 서비스 (기존)
            app:
              image: ${{ secrets.DOCKER_USERNAME }}/maple-app:latest
              container_name: maple-api
              restart: always
              ports:
                - "8000:8000"
              environment:
                - TYPE=\${TYPE}
                - PROJECT_ID=\${PROJECT_ID}
                - PRIVATE_KEY_ID=\${PRIVATE_KEY_ID}
                - PRIVATE_KEY=\${PRIVATE_KEY}
                - CLIENT_EMAIL=\${CLIENT_EMAIL}
                - CLIENT_ID=\${CLIENT_ID}
                - AUTH_URI=\${AUTH_URI}
                - TOKEN_URI=\${TOKEN_URI}
                - AUTH_PROVIDER_CERT_URL=\${AUTH_PROVIDER_CERT_URL}
                - CLIENT_CERT_URL=\${CLIENT_CERT_URL}
                - UNIVERSE_DOMAIN=\${UNIVERSE_DOMAIN}
                - FILE_PATH=\${FILE_PATH}
                - CLIENT_SECRET=\${CLIENT_SECRET}
                - GOOGLE_REDIRECT_URI=\${GOOGLE_REDIRECT_URI}
                - API_KEY=\${API_KEY}
                - DATABASE_URL=\${DATABASE_URL}
                - STORAGE_BUCKET=\${STORAGE_BUCKET}
                - NEXT_PUBLIC_SPOTIFY_CLIENT_ID=\${NEXT_PUBLIC_SPOTIFY_CLIENT_ID}
                - NEXT_PUBLIC_SPOTIFY_CLIENT_SECRET=\${NEXT_PUBLIC_SPOTIFY_CLIENT_SECRET}
              volumes:
                - ./static:/app/static
              networks:
                - maple-network
            
            # 프론트엔드 서비스 (새로 추가)
            frontend:
              image: ${{ secrets.DOCKER_USERNAME }}/maple-frontend:latest
              container_name: maple-frontend
              restart: always
              environment:
                - REACT_APP_SPOTIFY_CLIENT_ID=\${REACT_APP_SPOTIFY_CLIENT_ID}
                - REACT_APP_SPOTIFY_REDIRECT_URI=\${REACT_APP_SPOTIFY_REDIRECT_URI}
              networks:
                - maple-network
          
            # Nginx 서비스 (기존)
            nginx:
              image: nginx:stable-alpine
              container_name: maple-nginx
              restart: always
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./default.conf:/etc/nginx/conf.d/default.conf:ro
                - /etc/letsencrypt:/etc/letsencrypt:ro
                - ./static:/usr/share/nginx/html/static
              depends_on:
                - app
                - frontend
              networks:
                - maple-network
          
          networks:
            maple-network:
              driver: bridge
          EOL
          
          echo "Pulling the latest frontend Docker image..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/maple-frontend:latest || echo "Failed to pull frontend image!"
          
          echo "Restarting containers with updated configuration..."
          docker-compose up -d --force-recreate || echo "Failed to start containers!"
          
          echo "Deployment finished. Checking running containers..."
          docker ps