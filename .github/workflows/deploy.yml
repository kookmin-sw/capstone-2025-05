name: Deploy to OCI Server
on:
  push:
    branches:
      - maple-audio-deployment
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Copy files to OCI server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.OCI_AUDIO_HOST }}
          port: ${{ secrets.OCI_AUDIO_PORT }}
          username: ${{ secrets.OCI_AUDIO_USERNAME }}
          key: ${{ secrets.OCI_AUDIO_SSH_KEY }}
          source: "docker-compose.yml,nginx/**"
          target: "/home/${{ secrets.OCI_AUDIO_USERNAME }}/deployment"
          strip_components: 0
          overwrite: true
          debug: true
      - name: Verify copied files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.OCI_AUDIO_HOST }}
          port: ${{ secrets.OCI_AUDIO_PORT }}
          username: ${{ secrets.OCI_AUDIO_USERNAME }}
          key: ${{ secrets.OCI_AUDIO_SSH_KEY }}
          script: |
            echo "=== Verifying files in deployment directory ==="
            ls -la /home/${{ secrets.OCI_AUDIO_USERNAME }}/deployment/
            echo "=== Checking docker-compose.yml ==="
            cat /home/${{ secrets.OCI_AUDIO_USERNAME }}/deployment/docker-compose.yml | head -10
            echo "=== Checking nginx directory ==="
            ls -la /home/${{ secrets.OCI_AUDIO_USERNAME }}/deployment/nginx/
      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.OCI_AUDIO_HOST }}
          port: ${{ secrets.OCI_AUDIO_PORT }}
          username: ${{ secrets.OCI_AUDIO_USERNAME }}
          key: ${{ secrets.OCI_AUDIO_SSH_KEY }}
          script: |
            cd /home/${{ secrets.OCI_AUDIO_USERNAME }}/deployment
            
            # .env 파일 생성
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
            echo "TYPE=${{ secrets.TYPE }}" >> .env
            echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> .env
            echo "PRIVATE_KEY_ID=${{ secrets.PRIVATE_KEY_ID }}" >> .env
            echo "PRIVATE_KEY=\"${{ secrets.PRIVATE_KEY }}\"" >> .env
            echo "CLIENT_EMAIL=${{ secrets.CLIENT_EMAIL }}" >> .env
            echo "AUTH_URI=${{ secrets.AUTH_URI }}" >> .env
            echo "TOKEN_URI=${{ secrets.TOKEN_URI }}" >> .env
            echo "AUTH_PROVIDER_CERT_URL=${{ secrets.AUTH_PROVIDER_CERT_URL }}" >> .env
            echo "CLIENT_CERT_URL=${{ secrets.CLIENT_CERT_URL }}" >> .env
            echo "UNIVERSE_DOMAIN=${{ secrets.UNIVERSE_DOMAIN }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env
            echo "API_KEY=${{ secrets.API_KEY }}" >> .env
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
            echo "STORAGE_BUCKET=${{ secrets.STORAGE_BUCKET }}" >> .env
            echo "REACT_APP_API_URL=https://maple.ne.kr/api" >> .env
            echo "REACT_APP_SPOTIFY_CLIENT_ID=${{ secrets.REACT_APP_SPOTIFY_CLIENT_ID }}" >> .env
            echo "REACT_APP_SPOTIFY_REDIRECT_URI=https://maple.ne.kr/main" >> .env
            echo "PUBLIC_URL=/" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            
            # analysis.env 파일 생성
            echo "# Analysis Service Environment Variables" > analysis.env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> analysis.env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> analysis.env
            echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> analysis.env
            echo "CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}" >> analysis.env
            echo "API_HOST=0.0.0.0" >> analysis.env
            echo "API_PORT=8000" >> analysis.env
            echo "LOG_LEVEL=info" >> analysis.env
            echo "MODEL_DIR"="${{ secrets.MODEL_DIR }}" >> analysis.env
            echo "GROK_API_KEY=${{ secrets.GROK_API_KEY }}" >> analysis.env
            echo "GROK_API_URL=${{ secrets.GROK_API_URL }}" >> analysis.env
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> analysis.env
            echo "MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }}" >> analysis.env

            echo "GPU_INFERENCE_SERVICE_URL=${{ secrets.GPU_INFERENCE_SERVICE_URL }}" >> analysis.env
            echo "GPU_REQUEST_TIMEOUT=${{ secrets.GPU_REQUEST_TIMEOUT }}" >> analysis.env
            echo "GPU_BATCH_SIZE=${{ secrets.GPU_BATCH_SIZE }}" >> analysis.env
            echo "ELICE_CLOUD_HOST=${{ secrets.ELICE_CLOUD_HOST }}" >> analysis.env
            echo "ELICE_CLOUD_USER=${{ secrets.ELICE_CLOUD_USER }}" >> analysis.env
            echo "ELICE_CLOUD_PORT=${{ secrets.ELICE_CLOUD_PORT }}" >> analysis.env
            
            docker rm -f maple-analysis-service maple-media-server 2>/dev/null || true
            
            docker image prune -f
            docker container prune -f
            
            docker compose stop maple-analysis-service maple-media-server
            
            docker image rm -f ${DOCKER_USERNAME}/maple-analysis-service:latest ${DOCKER_USERNAME}/maple-media-server:latest 2>/dev/null || true
            
            docker compose pull --no-parallel
            
            docker compose up -d --build --force-recreate