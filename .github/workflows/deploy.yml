name: Deploy to OCI Server
on:
  push:
    branches:
      - maple-deployment
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Copy files to OCI server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.OCI_HOST }}
          port: ${{ secrets.OCI_PORT }}
          username: ${{ secrets.OCI_USERNAME }}
          key: ${{ secrets.OCI_SSH_KEY }}
          passphrase: ${{ secrets.OCI_SSH_KEY_PASSPHRASE }}
          source: "docker-compose.yml,nginx/"
          target: "/home/${{ secrets.OCI_USERNAME }}/deployment"
      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.OCI_HOST }}
          port: ${{ secrets.OCI_PORT }}
          username: ${{ secrets.OCI_USERNAME }}
          key: ${{ secrets.OCI_SSH_KEY }}
          passphrase: ${{ secrets.OCI_SSH_KEY_PASSPHRASE }}
          script: |
            cd /home/${{ secrets.OCI_USERNAME }}/deployment
            
            # .env 파일 생성
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
            echo "TYPE=${{ secrets.TYPE }}" >> .env
            echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> .env
            echo "PRIVATE_KEY_ID=${{ secrets.PRIVATE_KEY_ID }}" >> .env
            echo "PRIVATE_KEY=\"${{ secrets.PRIVATE_KEY }}\"" >> .env
            echo "CLIENT_EMAIL=${{ secrets.CLIENT_EMAIL }}" >> .env
            echo "AUTH_URI=${{ secrets.AUTH_URI }}" >> .env
            echo "TOKEN_URI=${{ secrets.TOKEN_URI }}" >> .env
            echo "AUTH_PROVIDER_CERT_URL=${{ secrets.AUTH_PROVIDER_CERT_URL }}" >> .env
            echo "CLIENT_CERT_URL=${{ secrets.CLIENT_CERT_URL }}" >> .env
            echo "UNIVERSE_DOMAIN=${{ secrets.UNIVERSE_DOMAIN }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env
            echo "API_KEY=${{ secrets.API_KEY }}" >> .env
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
            echo "STORAGE_BUCKET=${{ secrets.STORAGE_BUCKET }}" >> .env
            echo "REACT_APP_API_URL=https://maple.ne.kr/api" >> .env
            echo "REACT_APP_SPOTIFY_CLIENT_ID=${{ secrets.REACT_APP_SPOTIFY_CLIENT_ID }}" >> .env
            echo "REACT_APP_SPOTIFY_REDIRECT_URI=https://maple.ne.kr/main" >> .env
            echo "PUBLIC_URL=/" >> .env
            
            # analysis.env 파일 생성
            echo "# Analysis Service Environment Variables" > analysis.env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> analysis.env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> analysis.env
            echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> analysis.env
            echo "CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}" >> analysis.env
            echo "API_HOST=0.0.0.0" >> analysis.env
            echo "API_PORT=8000" >> analysis.env
            echo "LOG_LEVEL=info" >> analysis.env
            echo "MODEL_DIR"="${{ secrets.MODEL_DIR }}" >> analysis.env
            echo "GROK_API_KEY=${{ secrets.GROK_API_KEY }}" >> analysis.env
            echo "GROK_API_URL=${{ secrets.GROK_API_URL }}" >> analysis.env
            
            # 기존 컨테이너 명시적으로 정리 (충돌 방지)
            docker rm -f maple-client maple-api maple-redis analysis_api analysis_worker 2>/dev/null || true
            
            # 사용되지 않는 이미지, 볼륨, 네트워크 정리
            docker system prune -f
            
            # 컨테이너 중지 및 제거
            docker-compose down --remove-orphans
            
            # Docker 이미지 캐시 삭제 및 최신 이미지 강제 가져오기
            docker image rm -f ${DOCKER_USERNAME}/maple-client:latest ${DOCKER_USERNAME}/maple-api:latest ${DOCKER_USERNAME}/maple-analysis-service:latest 2>/dev/null || true
            
            # 최신 이미지 강제 pull (캐시 무시)
            docker-compose pull --no-parallel
            
            # 새 컨테이너 시작 (--force-recreate로 항상 새 컨테이너 생성)
            docker-compose up -d --build --force-recreate