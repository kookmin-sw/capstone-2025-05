name: Build Windows

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  SOLUTION_FILE_PATH: Builds\VisualStudio2022\MAPLE.sln
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Setup JUCE
      run: |
        echo "Downloading JUCE..."
        Invoke-WebRequest -Uri "https://github.com/juce-framework/JUCE/releases/download/7.0.9/juce-7.0.9-windows.zip" -OutFile "juce.zip"
        
        echo "Extracting JUCE..."
        Expand-Archive -Path "juce.zip" -DestinationPath "JUCE" -Force
        
        echo "Listing JUCE directory structure:"
        Get-ChildItem "JUCE" -Recurse | ForEach-Object {
            $indent = "  " * ($_.FullName.Split("\").Count - ($pwd.Path.Split("\").Count + 2))
            if ($_.PSIsContainer) {
                echo "${indent}[D] $($_.Name)"
            } else {
                echo "${indent}[F] $($_.Name)"
            }
        }
        
        # Projucer 찾기
        $PROJUCER_PATH = Get-ChildItem -Path "JUCE" -Recurse -Filter "Projucer.exe" | Select-Object -First 1 -ExpandProperty FullName
        
        if ($PROJUCER_PATH) {
            echo "Found Projucer at: $PROJUCER_PATH"
            
            # JUCE 모듈 경로 찾기 (여러 가능한 위치 확인)
            $POSSIBLE_MODULE_PATHS = @(
                "D:\a\maple-client-desktop\maple-client-desktop\JUCE\JUCE\modules",
                "D:\a\maple-client-desktop\maple-client-desktop\JUCE\modules",
                (Join-Path (Split-Path $PROJUCER_PATH -Parent) "modules"),
                (Join-Path (Split-Path (Split-Path $PROJUCER_PATH -Parent) -Parent) "modules")
            )
            
            $JUCE_MODULES_PATH = $null
            foreach ($path in $POSSIBLE_MODULE_PATHS) {
                if (Test-Path $path) {
                    echo "Found JUCE modules at: $path"
                    $JUCE_MODULES_PATH = $path
                    break
                }
            }
            
            if ($JUCE_MODULES_PATH) {
                echo "Setting JUCE modules path: $JUCE_MODULES_PATH"
                & $PROJUCER_PATH --set-global-search-path windows defaultJuceModulePath "$JUCE_MODULES_PATH"
                
                # .jucer 파일에서 모듈 경로 직접 수정
                $jucer_content = Get-Content "MAPLE.jucer" -Raw
                $jucer_content = $jucer_content -replace 'path="[^"]*"', "path=`"$($JUCE_MODULES_PATH -replace '\\', '/')`""
                $jucer_content | Set-Content "MAPLE.jucer" -NoNewline
                
                echo "Generating Visual Studio solution..."
                & $PROJUCER_PATH --resave "MAPLE.jucer"
                
                if ($LASTEXITCODE -ne 0) {
                    echo "Projucer failed to generate solution"
                    exit 1
                }
            } else {
                echo "Could not find JUCE modules directory"
                exit 1
            }
        } else {
            echo "Projucer.exe not found in extracted files"
            exit 1
        }

    - name: Check Solution Path
      run: |
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        dir
        echo "Checking Builds directory:"
        if (Test-Path "Builds") {
          echo "Builds directory exists"
          dir Builds
        } else {
          echo "Builds directory not found"
        }
        if (Test-Path ${{env.SOLUTION_FILE_PATH}}) {
          echo "Solution file found"
        } else {
          echo "Solution file not found"
          exit 1
        }

    - name: Build
      run: |
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}